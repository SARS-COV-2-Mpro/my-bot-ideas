name: Ideas Pusher (MEXC ULTIMATE EV@Pusher+, Stochastic Pro)

on:
  workflow_dispatch:
  schedule:
    - cron: "*/20 * * * *"

permissions:
  contents: read

concurrency:
  group: ideas-mexc-ultimate
  cancel-in-progress: true

jobs:
  push:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    env:
      WORKER_PUSH_URL: ${{ secrets.WORKER_PUSH_URL }}
      PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}

      # Optional (state)
      GIST_TOKEN: ${{ secrets.GIST_TOKEN }}
      GIST_ID: ${{ secrets.GIST_ID }}

      # Exchange + tuning knobs (via Repo/Org Variables)
      EXCHANGE: mexc
      MIN_QV_USD: ${{ vars.MIN_QV_USD }}
      TOP_N: ${{ vars.TOP_N }}
      MAX_SPREAD_BPS: ${{ vars.MAX_SPREAD_BPS }}
      EXP_LCB_MIN_BPS: ${{ vars.EXP_LCB_MIN_BPS }}
      FEES_BPS: ${{ vars.FEES_BPS }}
      NOTIONAL_USD: ${{ vars.NOTIONAL_USD }}
      MEXC_DEPTH_LIMIT: ${{ vars.MEXC_DEPTH_LIMIT }}
      OBI_TOPN: ${{ vars.OBI_TOPN }}
      ACTIVE_UTC_START: ${{ vars.ACTIVE_UTC_START }}
      ACTIVE_UTC_END: ${{ vars.ACTIVE_UTC_END }}
      MEXC_BASE: ${{ vars.MEXC_BASE }}

      # New knobs
      FORCE_SIZE_BPS: ${{ vars.FORCE_SIZE_BPS }}   # e.g., 1000 = 10% fixed; 0 = risk-based
      MP_TOP_POOL: ${{ vars.MP_TOP_POOL }}         # e.g., 20
      FILL_TO_TOP_N: ${{ vars.FILL_TO_TOP_N }}     # "true" to force-fill to TOP_N on MP fallback

    steps:
      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run pusher (EV@pusher+, stochastic regime/EV, VaR/ES gate + Fill-to-TopN)
        shell: bash
        run: |
          set -euo pipefail

          if [[ -z "${WORKER_PUSH_URL:-}" || -z "${PUSH_TOKEN:-}" ]]; then
            echo "[gha] Missing WORKER_PUSH_URL or PUSH_TOKEN"
            exit 1
          fi

          set +e
          node - <<'NODE'
          (async ()=>{
            'use strict';

            // ---------------- Utils ----------------
            const clamp=(x,a,b)=>Math.max(a,Math.min(b,x));
            const tanh=(x)=>Math.tanh(x);
            const sum=(a)=>a.reduce((x,y)=>x+y,0);
            const mean=(a)=>a.length?sum(a)/a.length:0;
            const std=(a)=>{const m=mean(a); let v=0; for(const x of a)v+=(x-m)*(x-m); return a.length>1?Math.sqrt(v/(a.length-1)):0;};
            const ema=(arr,p)=>{ if(arr.length<p) return null; const k=2/(p+1); let e=arr.slice(0,p).reduce((a,b)=>a+b,0)/p; for(let i=p;i<arr.length;i++) e=arr[i]*k+e*(1-k); return e; };
            const rsi=(cl,p=14)=>{ if(cl.length<=p) return null; let g=0,l=0; for(let i=1;i<=p;i++){ const d=cl[i]-cl[i-1]; g+=d>0?d:0; l+=d<0?-d:0; } let ag=g/p, al=l/p; for(let i=p+1;i<cl.length;i++){ const d=cl[i]-cl[i-1]; ag=(ag*(p-1)+(d>0?d:0))/p; al=(al*(p-1)+(d<0?-d:0))/p; } const rs=al===0?100:ag/al; return 100-100/(1+rs); };
            const computeADX_ATR=(h,l,c,p=14)=>{ const n=c.length; if(n<p+2) return null; const TR=[],plusDM=[],minusDM=[];
              for(let i=1;i<n;i++){ const up=h[i]-h[i-1], down=l[i-1]-l[i]; plusDM.push((up>down&&up>0)?up:0); minusDM.push((down>up&&down>0)?down:0);
                TR.push(Math.max(h[i]-l[i], Math.abs(h[i]-c[i-1]), Math.abs(l[i]-c[i-1]))); }
              let trN=0,pdmN=0,ndmN=0; for(let i=0;i<p;i++){ trN+=TR[i]; pdmN+=plusDM[i]; ndmN+=minusDM[i]; }
              let pDI=100*(pdmN/(trN||1)), nDI=100*(ndmN/(trN||1)); let dx=100*Math.abs(pDI-nDI)/((pDI+nDI)||1), adx=dx;
              for(let i=p;i<TR.length;i++){ trN=trN-(trN/p)+TR[i]; pdmN=pdmN-(pdmN/p)+plusDM[i]; ndmN=ndmN-(ndmN/p)+minusDM[i];
                pDI=100*(pdmN/(trN||1)); nDI=100*(ndmN/(trN||1)); dx=100*Math.abs(pDI-nDI)/((pDI+nDI)||1); adx=((adx*(p-1))+dx)/p; }
              const atr=trN/p; return { adx, atr, trLast: TR.at(-1) };
            };
            const vwapAnchored=(h,l,c,v,win)=>{ const n=c.length,s=Math.max(0,n-win); let pv=0,vv=0; for(let i=s;i<n;i++){ const tp=(h[i]+l[i]+c[i])/3; const vol=+v[i]||0; pv+=tp*vol; vv+=vol; } return vv>0?pv/vv:c.at(-1); };
            const corr=(a,b)=>{ const n=Math.min(a.length,b.length); if(n<5) return 0; const as=a.slice(-n), bs=b.slice(-n);
              const ma=mean(as), mb=mean(bs); let num=0,da=0,db=0; for(let i=0;i<n;i++){ const xa=as[i]-ma, xb=bs[i]-mb; num+=xa*xb; da+=xa*xa; db+=xb*xb; }
              const den=Math.sqrt(da*db)||1; return num/den;
            };
            const wilsonLCB=(p,n,z=1.34)=>{ if(n<=0) return p; const z2=z*z; const a=p + z2/(2*n); const b=z*Math.sqrt((p*(1-p)+z2/(4*n))/n); const c=1+z2/n; return clamp((a-b)/c, 0, 1); };
            const sleep=(ms)=>new Promise(r=>setTimeout(r,ms));
            const jitter=(ms)=>ms + Math.floor(Math.random()*ms*0.25);
            const softmax=(arr,t=20)=>{ const m=Math.max(...arr,0); const ex=arr.map(x=>Math.exp((x-m)/t)); const s=ex.reduce((a,b)=>a+b,0)||1; return ex.map(x=>x/s); };
            const log=(...a)=>console.log("[gha]",...a);

            // RNG
            let bmSpare=null;
            const randn=()=>{ if(bmSpare!=null){ const v=bmSpare; bmSpare=null; return v; } let u=0,v=0; while(u===0) u=Math.random(); while(v===0) v=Math.random(); const r=Math.sqrt(-2*Math.log(u)); const th=2*Math.PI*v; bmSpare=r*Math.sin(th); return r*Math.cos(th); };

            // Kalman (1D RW)
            function kalman1D(obs,{q=1e-5,r=1e-3,x0=null,p0=1e-2}={}){
              if(!obs?.length) return [];
              let x=(x0==null?obs[0]:x0), p=p0;
              const out=[];
              for(const z of obs){
                p+=q;
                const K=p/(p+r);
                x=x + K*(z-x);
                p=(1-K)*p;
                out.push(x);
              }
              return out;
            }

            // ------------- HMM (3-state Gaussian), EM lite -------------
            function mvnPdf(x,mu,Sig){
              const d=x.length;
              const S=Sig.map((row,i)=>row.map((v,j)=> v + (i===j?1e-6:0)));
              const L=cholesky(S); if(!L) return 1e-12;
              const diff=x.map((v,i)=>v-(mu[i]||0));
              const y=forwardSub(L,diff);
              const quad = dot(y,y);
              const logdet = 2*sum(L.map((row,i)=>Math.log(row[i]||1e-12)));
              const log2pi = d*Math.log(2*Math.PI);
              const logp = -0.5*(log2pi + logdet + quad);
              return Math.exp(Math.max(-50, Math.min(50, logp)));
            }
            function dot(a,b){ let s=0; for(let i=0;i<a.length;i++) s+=a[i]*(b[i]||0); return s; }
            function cholesky(A){
              const n=A.length; const L=Array.from({length:n},()=>Array(n).fill(0));
              for(let i=0;i<n;i++){
                for(let j=0;j<=i;j++){
                  let s=0; for(let k=0;k<j;k++) s+=L[i][k]*L[j][k];
                  const v=A[i][j]-s;
                  if(i===j){ if(v<=1e-12) return null; L[i][j]=Math.sqrt(v); }
                  else { L[i][j]=v/(L[j][j]||1e-12); }
                }
              }
              return L;
            }
            function forwardSub(L,b){
              const n=L.length; const y=Array(n).fill(0);
              for(let i=0;i<n;i++){ let s=0; for(let k=0;k<i;k++) s+=L[i][k]*y[k]; y[i]=(b[i]-s)/(L[i][i]||1e-12); }
              return y;
            }
            function backSub(U,y){
              const n=U.length; const x=Array(n).fill(0);
              for(let i=n-1;i>=0;i--){ let s=0; for(let k=i+1;k<n;k++) s+=U[i][k]*x[k]; x[i]=(y[i]-s)/(U[i][i]||1e-12); }
              return x;
            }
            function matInvSPD(A){
              const L=cholesky(A); if(!L) return null;
              const n=A.length; const inv=Array.from({length:n},()=>Array(n).fill(0));
              for(let i=0;i<n;i++){
                const e=Array(n).fill(0); e[i]=1;
                const y=forwardSub(L,e);
                const x=backSub(L.map((row,i)=>row.map((v,j)=> (i===j?row[i][i]:L[j][i]) )), y);
                for(let r=0;r<n;r++) inv[r][i]=x[r];
              }
              return inv;
            }
            function hmmTrainGaussian(obs,K=3,iters=6){
              const T=obs.length; const d=obs[0]?.length||0; if(T<d+5) return null;
              const mu=Array.from({length:K},(_,k)=> obs[Math.floor((k+1)*T/(K+1))].slice());
              const Sig=Array.from({length:K},()=>{ const s=Array.from({length:d},(_,i)=>Array.from({length:d},(_,j)=> (i===j?0.1:0))); return s; });
              let pi=Array(K).fill(1/K), A=Array.from({length:K},()=>Array(K).fill(1/K));
              const eps=1e-8;

              for(let it=0; it<iters; it++){
                const B=Array.from({length:T},()=>Array(K).fill(0));
                for(let t=0;t<T;t++) for(let k=0;k<K;k++) B[t][k]=mvnPdf(obs[t],mu[k],Sig[k]) + 1e-18;

                const alpha=Array.from({length:T},()=>Array(K).fill(0)), c=Array(T).fill(0);
                for(let k=0;k<K;k++) alpha[0][k]=pi[k]*B[0][k];
                c[0]=1/(sum(alpha[0])||1e-12); for(let k=0;k<K;k++) alpha[0][k]*=c[0];
                for(let t=1;t<T;t++){
                  for(let k=0;k<K;k++){
                    let s=0; for(let i=0;i<K;i++) s+=alpha[t-1][i]*A[i][k];
                    alpha[t][k]=s*B[t][k];
                  }
                  c[t]=1/(sum(alpha[t])||1e-12);
                  for(let k=0;k<K;k++) alpha[t][k]*=c[t];
                }
                const beta=Array.from({length:T},()=>Array(K).fill(0));
                for(let k=0;k<K;k++) beta[T-1][k]=c[T-1];
                for(let t=T-2;t>=0;t--){
                  for(let k=0;k<K;k++){
                    let s=0; for(let j=0;j<K;j++) s+=A[k][j]*B[t+1][j]*beta[t+1][j];
                    beta[t][k]=s*c[t];
                  }
                }
                const gamma=Array.from({length:T},()=>Array(K).fill(0));
                for(let t=0;t<T;t++){ const den=sum(alpha[t].map((a,kk)=>a*beta[t][kk]))||1e-12; for(let k=0;k<K;k++) gamma[t][k]=(alpha[t][k]*beta[t][k])/(den||1e-12); }
                const xi=Array.from({length:T-1},()=>Array.from({length:K},()=>Array(K).fill(0)));
                for(let t=0;t<T-1;t++){
                  let den=0;
                  for(let i=0;i<K;i++) for(let j=0;j<K;j++) den+=alpha[t][i]*A[i][j]*B[t+1][j]*beta[t+1][j];
                  den=den||1e-12;
                  for(let i=0;i<K;i++) for(let j=0;j<K;j++) xi[t][i][j]=(alpha[t][i]*A[i][j]*B[t+1][j]*beta[t+1][j])/den;
                }

                for(let k=0;k<K;k++){
                  const gk=sum(gamma.map(g=>g[k]))||eps;
                  pi[k]=gamma[0][k];
                  for(let j=0;j<K;j++){ let s=0; for(let t=0;t<T-1;t++) s+=xi[t][k][j]; A[k][j]=s/(gk - gamma[T-1][k] + eps); A[k][j]=clamp(A[k][j],1e-6,1); }
                  const mu_k=Array(Sig[0].length).fill(0);
                  for(let t=0;t<T;t++) for(let i=0;i<mu_k.length;i++) mu_k[i]+=gamma[t][k]*obs[t][i];
                  for(let i=0;i<mu_k.length;i++) mu_k[i]/=(gk||1e-12);
                  mu[k]=mu_k;
                  const S=Array.from({length:mu_k.length},()=>Array(mu_k.length).fill(0));
                  for(let t=0;t<T;t++){
                    const diff=obs[t].map((v,i)=>v-mu_k[i]);
                    for(let i=0;i<mu_k.length;i++) for(let j=0;j<mu_k.length;j++) S[i][j]+=gamma[t][k]*diff[i]*diff[j];
                  }
                  for(let i=0;i<mu_k.length;i++) for(let j=0;j<mu_k.length;j++) S[i][j]/=(gk||1e-12);
                  for(let i=0;i<mu_k.length;i++) S[i][i]=Math.max(S[i][i], 1e-4);
                  Sig[k]=S;
                }
                for(let i=0;i<K;i++){ const s=sum(A[i])||1e-12; for(let j=0;j<K;j++) A[i][j]/=s; }
              }

              return { pi, A, mu, Sig };
            }
            function hmmPosterior(obs, model){
              const {pi,A,mu,Sig}=model; const T=obs.length, K=pi.length; if(T===0) return Array(K).fill(1/K);
              const B=obs.map(o=> mu.map((m,ki)=>mvnPdf(o,m,Sig[ki])+1e-18));
              const alpha=Array.from({length:T},()=>Array(K).fill(0)), c=Array(T).fill(0);
              for(let k=0;k<K;k++) alpha[0][k]=pi[k]*B[0][k];
              c[0]=1/(sum(alpha[0])||1e-12); for(let k=0;k<K;k++) alpha[0][k]*=c[0];
              for(let t=1;t<T;t++){
                for(let k=0;k<K;k++){ let s=0; for(let i=0;i<K;i++) s+=alpha[t-1][i]*A[i][k]; alpha[t][k]=s*B[t][k]; }
                c[t]=1/(sum(alpha[t])||1e-12); for(let k=0;k<K;k++) alpha[t][k]*=c[t];
              }
              return alpha[T-1];
            }

            // ------------- GP (RBF) for p_win with uncertainty -------------
            function medianPairwiseDist(X){
              const n=X.length; if(n<2) return 1;
              const sampleIdx=[]; for(let i=0;i<n;i+=Math.max(1,Math.floor(n/20))) sampleIdx.push(i);
              const dists=[];
              for(let i=0;i<sampleIdx.length;i++){
                for(let j=i+1;j<sampleIdx.length;j++){
                  const a=X[sampleIdx[i]], b=X[sampleIdx[j]];
                  let d2=0; for(let k=0;k<a.length;k++){ const dv=(a[k]-b[k]); d2+=dv*dv; }
                  dists.push(Math.sqrt(d2));
                }
              }
              dists.sort((a,b)=>a-b);
              return dists[Math.floor(dists.length/2)]||1;
            }
            function buildGP(X,Y,lam=0.10){
              const n=X.length; if(n===0) return null;
              const ell = medianPairwiseDist(X) || 1;
              const inv2l2 = 1/(2*ell*ell);
              const K = Array.from({length:n},()=>Array(n).fill(0));
              for(let i=0;i<n;i++){
                for(let j=0;j<n;j++){
                  let d2=0; for(let k=0;k<X[i].length;k++){ const dv=X[i][k]-X[j][k]; d2+=dv*dv; }
                  K[i][j]=Math.exp(-d2*inv2l2);
                }
                K[i][i]+=lam;
              }
              const L=cholesky(K); if(!L) return null;
              const y=Y.slice();
              const z=forwardSub(L,y);
              const LT=L.map((row,i)=>row.map((v,j)=> L[j]?.[i]??0));
              const alpha=backSub(LT,z);
              return { X, alpha, L, ell, inv2l2 };
            }
            function gpPredict(model,x){
              if(!model) return { mu:0.5, sigma:0.25 };
              const {X,alpha,L,inv2l2}=model;
              const n=X.length;
              const kstar=Array(n).fill(0);
              for(let i=0;i<n;i++){
                let d2=0; for(let k=0;k<X[i].length;k++){ const dv=X[i][k]-x[k]; d2+=dv*dv; }
                kstar[i]=Math.exp(-d2*inv2l2);
              }
              let mu=0; for(let i=0;i<n;i++) mu+=kstar[i]*alpha[i];
              const v=forwardSub(L,kstar);
              let vtv=0; for(const vi of v) vtv+=vi*vi;
              let varp=Math.max(1e-6, 1 - vtv);
              return { mu:clamp(mu,0,1), sigma:Math.sqrt(varp) };
            }

            // ------------- SDE Monte Carlo (GBM) -------------
            function gbmSimEV({entry,tp_bps,sl_bps,side,mu, sigma, dt, steps, N=192, cost_bps=10}){
              let hitTP=0, ev=0;
              const up=(side==="long");
              const tpF=tp_bps/10000, slF=sl_bps/10000;
              for(let n=0;n<N;n++){
                let S=entry;
                let tp=up? entry*(1+tpF): entry*(1-tpF);
                let sl=up? entry*(1-slF): entry*(1+slF);
                let win=0, pnl_bps=0;
                for(let t=0;t<steps;t++){
                  const z=randn();
                  S = S * Math.exp((mu - 0.5*sigma*sigma)*dt + sigma*Math.sqrt(dt)*z);
                  if(up){
                    if(S>=tp){ win=1; pnl_bps=tp_bps - cost_bps; break; }
                    if(S<=sl){ win=0; pnl_bps=-sl_bps - cost_bps; break; }
                  }else{
                    if(S<=tp){ win=1; pnl_bps=tp_bps - cost_bps; break; }
                    if(S>=sl){ win=0; pnl_bps=-sl_bps - cost_bps; break; }
                  }
                  if(t===steps-1){
                    const ret = up? (S/entry - 1) : (entry/S - 1);
                    pnl_bps = Math.round(ret*10000) - cost_bps;
                    win = pnl_bps>0?1:0;
                  }
                }
                hitTP+=win;
                ev += pnl_bps;
              }
              const p=hitTP/N;
              const p_lcb = wilsonLCB(p, N, 1.34);
              const ev_mean = ev/N;
              const ev_lcb = p_lcb*tp_bps - (1-p_lcb)*sl_bps - cost_bps;
              return { p, p_lcb, ev_bps: Math.round(ev_mean), ev_lcb_bps: Math.round(ev_lcb) };
            }

            function optimizeRRR_MC({atr_bps,cost_bps,spread_bps,entry,side,mu,sigma,ttl_sec}){
              const slMults=[0.35,0.5,0.7,1.0,1.3,1.5];
              const tpMults=[0.5,0.8,1.1,1.4,1.8,2.1];
              const dt=1;
              const steps=Math.max(1, Math.round(ttl_sec/300));
              let best=null;
              for(const sm of slMults){
                for(const tm of tpMults){
                  const sl_bps=Math.round(sm*atr_bps);
                  const tp_bps=Math.round(tm*atr_bps);
                  if(tp_bps <= cost_bps+2) continue;
                  const {p_lcb, ev_lcb_bps} = gbmSimEV({entry,tp_bps,sl_bps,side,mu,sigma,dt,steps,N:128,cost_bps});
                  const qual=ev_lcb_bps - Math.max(0, (spread_bps-6));
                  if(!best || qual>(best.qual||-1e9)){
                    best={ tp_bps, sl_bps, r:tp_bps/Math.max(1,sl_bps), p_lcb, ev_lcb_bps, qual };
                  }
                }
              }
              if(best){
                const refine=[-0.15, -0.05, 0, +0.05, +0.15];
                for(const ds of refine){
                  for(const dtp of refine){
                    const sm=clamp(best.sl_bps/atr_bps + ds, 0.30, 1.50);
                    const tm=clamp(best.tp_bps/atr_bps + dtp, 0.40, 2.10);
                    const sl_bps=Math.round(sm*atr_bps);
                    const tp_bps=Math.round(tm*atr_bps);
                    const {p_lcb, ev_lcb_bps} = gbmSimEV({entry,tp_bps,sl_bps,side,mu,sigma,dt,steps,N:192,cost_bps});
                    const qual=ev_lcb_bps;
                    if(qual>(best.qual||-1e9)) best={ tp_bps, sl_bps, r:tp_bps/Math.max(1,sl_bps), p_lcb, ev_lcb_bps, qual };
                  }
                }
              }
              return best;
            }

            // ------------- Portfolio VaR / ES (MC) -------------
            function mvnSample(meanVec, Sigma, M=1000){
              const n=meanVec.length; const L=cholesky(Sigma); if(!L) return [];
              const out=[];
              for(let m=0;m<M;m++){
                const z=Array(n).fill(0).map(()=>randn());
                const y=Array(n).fill(0);
                for(let i=0;i<n;i++){ let s=0; for(let k=0;k<=i;k++) s+=L[i][k]*z[k]; y[i]=s + (meanVec[i]||0); }
                out.push(y);
              }
              return out;
            }
            function portfolioVaR_ES(picks){
              if(picks.length===0) return { VaR95_bps:0, ES95_bps:0, scale:1 };
              const n=picks.length;
              const mu=Array(n).fill(0);
              const sd=Array(n).fill(0);
              for(let i=0;i<n;i++){
                const r5=picks[i].ret5||[];
                const rMean=mean(r5), rStd=std(r5);
                const steps=Math.max(1, Math.round((picks[i].ttl_sec||600)/300));
                const muH=rMean*steps;
                const sdH=rStd*Math.sqrt(steps);
                mu[i]=muH*10000;
                sd[i]=sdH*10000;
              }
              const Sigma=Array.from({length:n},()=>Array(n).fill(0));
              for(let i=0;i<n;i++){
                for(let j=0;j<n;j++){
                  const rho=corr(picks[i].ret5||[], picks[j].ret5||[]);
                  Sigma[i][j]=rho * sd[i] * sd[j];
                }
                Sigma[i][i]=Math.max(Sigma[i][i], 1e-3 + sd[i]*sd[i]);
              }
              const weights=picks.map(p=> (p.size_bps||0)); const wSum=sum(weights)||1; for(let i=0;i<weights.length;i++) weights[i]/=wSum;

              const draws=mvnSample(mu,Sigma,1200);
              const port=[];
              for(const d of draws){
                let pr=0; for(let i=0;i<n;i++) pr += (weights[i]||0) * (d[i]||0);
                port.push(pr);
              }
              port.sort((a,b)=>a-b);
              const idx=Math.floor(0.05*port.length);
              const VaR95=port[idx]||0;
              const ES=mean(port.slice(0,idx+1));
              return { VaR95_bps: Math.round(VaR95), ES95_bps: Math.round(ES), scale:1 };
            }

            // ---------- Config / ENV ----------
            const UA="gh-actions-ideas-mexc-ultimate/4.0-stoch (+https://github.com/)";
            async function fetchWithTimeout(url,opts={},ms=12000){ const ac=new AbortController(); const t=setTimeout(()=>ac.abort(),ms); try{ return await fetch(url,{...opts,signal:ac.signal,headers:{"User-Agent":UA,...(opts.headers||{})}});} finally{ clearTimeout(t);} }
            async function getJSON(url,ms=12000,tries=2){ for(let a=0;a<tries;a++){ try{ const r=await fetchWithTimeout(url,{},ms); if(r?.ok){ return await r.json(); } }catch{} await sleep(jitter(220)); } return null; }

            const EXCHANGE=(process.env.EXCHANGE||"mexc").toLowerCase().replace("mexci","mexc");
            if(EXCHANGE!=="mexc"){ console.error("[gha] This build targets MEXC. Set EXCHANGE=mexc"); process.exit(1); }
            const MEXC_BASES=[process.env.MEXC_BASE,"https://api.mexc.com","https://www.mexc.com"].filter(Boolean);

            // Universe sizing
            const MIN_QV_ENV = Number(process.env.MIN_QV_USD||"0") || 0;
            const UNIV_TARGET_MIN=100, UNIV_TARGET_MAX=120;
            const DYN_QV_MIN=10_000_000, DYN_QV_STEP=5_000_000;

            // Core knobs
            const TOP_N = Number(process.env.TOP_N||"3");
            const MAX_SPREAD_BPS = Number(process.env.MAX_SPREAD_BPS||"12");
            const EXP_LCB_MIN_BPS = Number(process.env.EXP_LCB_MIN_BPS||"5");

            // TA + windows
            const EMA_FAST=21, EMA_SLOW=50, ADX_P=14, ATR_P=14;
            const K1M=240, K5M=120, K15M=96, K1H=96;
            const VWAP_5M_WIN=36;

            // Costs & micro
            const COST_BPS = Number(process.env.FEES_BPS||"10");
            const NOTIONAL = Number(process.env.NOTIONAL_USD||"300");
            const DEPTH_LIMIT = Number(process.env.MEXC_DEPTH_LIMIT||"50");
            const OBI_TOPN = Number(process.env.OBI_TOPN||"12");

            // Risk & timing
            const COOLDOWN_MS=3*60*60*1000, FLIP_GUARD_MS=30*60*1000;
            const DD_24H_LIMIT_BPS=-150, DD_PEAK_LIMIT_BPS=-300;
            const WILSON_Z=1.34, TARGET_PORT_RISK_BPS=52;
            const TTL_MIN=540, TTL_MAX=1200;

            // New knobs
            const FORCE_SIZE_BPS = Number(process.env.FORCE_SIZE_BPS||"0");
            const MP_TOP_POOL = Number(process.env.MP_TOP_POOL||"20");
            const FILL_TO_TOP_N = (process.env.FILL_TO_TOP_N || "true").toLowerCase() === "true";

            // EV gating
            const EV_MIN_BPS=3;

            // ToD gate
            const S_H = process.env.ACTIVE_UTC_START? Number(process.env.ACTIVE_UTC_START): null;
            const E_H = process.env.ACTIVE_UTC_END?   Number(process.env.ACTIVE_UTC_END):   null;
            const nowH = new Date().getUTCHours();
            const todOK = (S_H==null || E_H==null) ? true : (S_H<=E_H ? (nowH>=S_H && nowH<=E_H) : (nowH>=S_H || nowH<=E_H));

            const STABLES=new Set(["USDT","USDC","USD","USDE","USDD","BUSD","FDUSD","TUSD","DAI","USDP","PAX","USTC"]);

            // ---------- Worker endpoints ----------
            const PUSH_URL=process.env.WORKER_PUSH_URL||"";
            const PUSH_TOKEN=process.env.PUSH_TOKEN||"";
            const HEALTH_URL=(()=>{ try{ const u=new URL(PUSH_URL); return `${u.origin}${u.pathname.replace(/\/signals\/push(\?.*)?$/,"/health")}`;}catch{return PUSH_URL.replace(/\/signals\/push(\?.*)?$/,"/health");}})();

            // Health ping
            log("health GET", HEALTH_URL);
            try{ const r=await fetchWithTimeout(HEALTH_URL,{ headers:{ "Authorization":`Bearer ${PUSH_TOKEN}`, "User-Agent":UA }},5000); let t=""; try{ t=await r.text(); }catch{} log("health status", r?.status||"ERR", (t||"").slice(0,160)); }catch(e){ log("health error", e?.message||e); }

            // ---------- MEXC Adapter ----------
            async function pickMexcBase(){ for(const b of MEXC_BASES){ try{ const r=await fetchWithTimeout(`${b}/api/v3/time`,{},4000); if(r?.ok) return b; }catch{} } throw new Error("No healthy MEXC base"); }
            const BASE=await pickMexcBase();
            const api=(path,params={})=>{ const u=new URL(path,BASE); for(const [k,v] of Object.entries(params)){ if(v!==undefined&&v!==null) u.searchParams.set(k,String(v)); } return u.toString(); };
            async function fetchK(sym,interval,limit,startTime,endTime){ const u=api("/api/v3/klines",{symbol:sym,interval,limit,startTime,endTime}); const r=await getJSON(u,10000,2); return Array.isArray(r)?r:null; }
            async function fetchDepth(symbol){ return await getJSON(api("/api/v3/depth",{symbol,limit:DEPTH_LIMIT}), 10000, 2); }
            async function fetchAll24hr(){
              let all = await getJSON(api("/api/v3/ticker/24hr"), 10000, 2);
              if(Array.isArray(all) && all.length) return all;
              const exi=await getJSON(api("/api/v3/exchangeInfo"), 10000, 2);
              const syms=(exi?.symbols||[]).filter(s=>s.status==="TRADING").map(s=>s.symbol).slice(0,300);
              const out=[];
              for(let i=0;i<syms.length;i+=24){
                const chunk=syms.slice(i,i+24);
                const got=await Promise.all(chunk.map(s=>getJSON(api("/api/v3/ticker/24hr",{symbol:s}),6000,1)));
                for(const x of got) if(x) out.push(x);
                await sleep(180);
              }
              return out;
            }

            // ---------- State (Gist) ----------
            async function loadState(){
              const token=process.env.GIST_TOKEN, id=process.env.GIST_ID;
              const init={ v:"mexc-ultimate-4.0-stoch", cooldown:{}, cooldown_side:{}, pending:[], equity:[], gp_data:[] };
              if(!token||!id) return { state:init, persist:null };
              try{
                const r=await fetchWithTimeout(`https://api.github.com/gists/${id}`,{ headers:{Authorization:`Bearer ${token}`,"Accept":"application/vnd.github+json","User-Agent":UA}}); if(!r.ok) return { state:init, persist:null };
                const g=await r.json(); const c=g.files?.["state.json"]?.content; return { state: c?JSON.parse(c):init, persist:{id,token} };
              }catch{ return { state:init, persist:null }; }
            }
            async function saveState(persist,state){
              if(!persist) return;
              try{
                await fetchWithTimeout(`https://api.github.com/gists/${persist.id}`,{
                  method:"PATCH",
                  headers:{Authorization:`Bearer ${persist.token}`,"Accept":"application/vnd.github+json","Content-Type":"application/json","User-Agent":UA},
                  body: JSON.stringify({ files:{ "state.json":{ content: JSON.stringify(state) } } })
                });
              }catch{}
            }

            // Evaluate pending fills; add GP labels from realized outcomes
            async function evalPending(state){
              const now=Date.now(); const keep=[];
              for(const p of state.pending||[]){
                if(now < p.ts_ms + p.hold_sec*1000 + 5000){ keep.push(p); continue; }
                const k = await fetchK(p.symbolFull,"1m",K1M, p.ts_ms-60*1000, p.ts_ms+p.hold_sec*1000+60*1000);
                if(!k){ keep.push(p); continue; }
                const ts=k.map(x=>+x[0]), highs=k.map(x=>+x[2]), lows=k.map(x=>+x[3]), closes=k.map(x=>+x[4]);
                const long=p.side==="long";
                const entry = Number.isFinite(p.entry_limit) ? p.entry_limit : p.entry_price;
                const tpB=(p.tp_bps||0)/10000, slB=(p.sl_bps||0)/10000;
                const limitAtSL = p.entry_policy==="limit_at_old_sl";

                let exitPx=closes.at(-1), filled=false;
                if(limitAtSL){
                  const t0=p.ts_ms, tEnd=t0 + p.hold_sec*1000;
                  let iFill=-1;
                  for(let i=0;i<k.length;i++){
                    const t=ts[i]; if(t < t0-1000) continue; if(t > tEnd) break;
                    if(long ? (lows[i] <= entry) : (highs[i] >= entry)){ iFill=i; break; }
                  }
                  if(iFill===-1){ keep.push(p); continue; }
                  const tpPx = Number.isFinite(p.tp_abs) ? p.tp_abs : (long ? entry*(1+tpB) : entry*(1-tpB));
                  const slPx = Number.isFinite(p.sl_abs) ? p.sl_abs : (long ? entry*(1-slB) : entry*(1+slB));
                  for(let i=iFill;i<k.length;i++){
                    const t=ts[i]; if(t > tEnd) break;
                    const hi=highs[i], lo=lows[i];
                    if(long){ if(hi>=tpPx){ exitPx=tpPx; break; } if(lo<=slPx){ exitPx=slPx; break; } }
                    else    { if(lo<=tpPx){ exitPx=tpPx; break; } if(hi>=slPx){ exitPx=slPx; break; } }
                  }
                  filled=true;
                }else{
                  filled=true;
                  for(let i=0;i<k.length;i++){
                    const hi=highs[i], lo=lows[i];
                    if(long){ if(hi>=entry*(1+tpB)){ exitPx=entry*(1+tpB); break; } if(lo<=entry*(1-slB)){ exitPx=entry*(1-slB); break; } }
                    else    { if(lo<=entry*(1-tpB)){ exitPx=entry*(1-tpB); break; } if(hi>=entry*(1+slB)){ exitPx=entry*(1+slB); break; } }
                  }
                }
                if(!filled){ keep.push(p); continue; }
                const ret = long? (exitPx/entry - 1) : (entry/exitPx - 1);
                const pnl_bps = Math.round(ret*10000) - (p.cost_bps||0);
                state.equity.push({ ts_ms:p.ts_ms, pnl_bps });
                if(Array.isArray(p.gp_feat) && p.gp_feat.length){
                  state.gp_data.push({ x:p.gp_feat, y: pnl_bps>0 ? 1:0 });
                  if(state.gp_data.length>600) state.gp_data=state.gp_data.slice(-600);
                }
              }
              state.pending = keep;
              if(state.equity.length>6000) state.equity = state.equity.slice(-6000);
            }
            const equityStats=(eq)=>{ const day=Date.now()-24*3600*1000; let pnl24=0,cum=0,peak=0,dd=0;
              for(const e of eq){ if(e.ts_ms>=day) pnl24+=e.pnl_bps; cum+=e.pnl_bps; if(cum>peak) peak=cum; dd=Math.min(dd,cum-peak); }
              return { pnl24_bps:Math.round(pnl24), peak_dd_bps:Math.round(dd) };
            };

            // ---------- Main ----------
            let reason="ok", selectionTier="none";
            try{
              const ALL24 = await fetchAll24hr();
              const booksRaw=await getJSON(api("/api/v3/ticker/bookTicker"),10000,2) || [];
              const bookMap=new Map(booksRaw.map(b=>[b.symbol,{ bid:+b.bidPrice, ask:+b.askPrice }]));

              if(!todOK){ reason="tod_gate"; }

              // Universe
              const QUOTES=["USDT","USDC","USD"];
              const split=(sym)=>{ for(const q of QUOTES){ if(sym.endsWith(q)) return { base: sym.slice(0,-q.length), quote:q }; } return null; };
              const all=[];
              for(const t of ALL24||[]){
                const sym=t.symbol||t.s; if(!sym) continue;
                const sq=split(sym); if(!sq) continue;
                if(STABLES.has(sq.base)) continue;
                const qv=+(t.quoteVolume||t.q||0);
                if(!isFinite(qv)||qv<=0) continue;
                all.push({ symbol:sym, base:sq.base, quote:sq.quote, qv });
              }
              all.sort((a,b)=>b.qv-a.qv);

              // Dynamic min-QV to ~100–120
              let dynMinQV=Math.max(MIN_QV_ENV||0, DYN_QV_MIN);
              let filt=all.filter(x=>x.qv>=dynMinQV);
              while(filt.length<UNIV_TARGET_MIN && dynMinQV>DYN_QV_MIN){
                dynMinQV = Math.max(DYN_QV_MIN, dynMinQV - DYN_QV_STEP);
                filt = all.filter(x=>x.qv>=dynMinQV);
              }
              const universe=filt.slice(0,UNIV_TARGET_MAX);
              if(!universe.length){ reason = (reason!=="ok"?reason:"no_universe"); }

              // Benchmarks
              const BTC="BTCUSDT", ETH="ETHUSDT", SOL="SOLUSDT";
              const kBTC15=await fetchK(BTC,"15m",K15M);
              const kETH15=await fetchK(ETH,"15m",K15M);
              const kSOL15=await fetchK(SOL,"15m",K15M);
              const kBTC1H=await fetchK(BTC,"1h",K1H);
              const kETH1H=await fetchK(ETH,"1h",K1H);

              // HMM regime features (ROC, ADXnorm, squeeze)
              function regimeFeatures(k15){
                if(!k15||k15.length<ADX_P+5) return [];
                const h=k15.map(x=>+x[2]), l=k15.map(x=>+x[3]), c=k15.map(x=>+x[4]);
                const { adx }=computeADX_ATR(h,l,c,ADX_P)||{adx:0};
                const roc=((c.at(-1)/c.at(-5)) - 1);
                const winS=20; const retW=[]; for(let i=c.length-winS;i<c.length;i++){ retW.push((c[i]/c[i-1])-1); }
                const bbWidth = std(retW)*Math.sqrt(winS);
                const atr=(computeADX_ATR(h,l,c,ADX_P)||{atr:1}).atr||1;
                const kelWidth = (atr/c.at(-1));
                const squeeze = kelWidth>0 ? (bbWidth/kelWidth) : 1;
                return [roc, clamp((adx-10)/30,0,1), clamp((1.15 - squeeze)/0.45, 0, 1)];
              }
              const seqFeat=[];
              function rollSeq(k){ if(!k) return; const c=k.map(x=>+x[4]); for(let i=5;i<Math.min(k.length,80);i++){ const seg=k.slice(i-5,i+1); const f=regimeFeatures(seg); if(f.length) seqFeat.push(f); } }
              rollSeq(kBTC15); rollSeq(kETH15);
              const hmm = seqFeat.length>=20 ? hmmTrainGaussian(seqFeat,3,6) : null;
              const post = hmm ? hmmPosterior(seqFeat.slice(-15),hmm) : [0.4,0.4,0.2]; // [Trend, MR, Breakout]
              const weights = { wTrend:post[0]||0.4, wMR:post[1]||0.4, wBO:post[2]||0.2 };

              log("regime posterior", weights);

              // State & DD gate
              const { state, persist } = await loadState();
              try{ await evalPending(state); }catch(e){ log("evalPending warn", e?.message||e); }
              const { pnl24_bps, peak_dd_bps } = equityStats(state.equity);
              const throttle = (pnl24_bps<=DD_24H_LIMIT_BPS) || (peak_dd_bps<=DD_PEAK_LIMIT_BPS);

              // GP model from realized outcomes
              let gpModel=null;
              try{
                const X = state.gp_data?.map(d=>d.x)||[];
                const Y = state.gp_data?.map(d=>d.y)||[];
                if(X.length>=20) gpModel = buildGP(X.slice(-400), Y.slice(-400), 0.12);
              }catch(e){ log("gp build warn", e?.message||e); }

              // Liquidity pct rank
              const liqPct=new Map(); for(let i=0;i<universe.length;i++){ liqPct.set(universe[i].symbol,(universe.length===1)?1:1 - i/(universe.length-1)); }

              // Helpers
              const toRet5=(k)=>{ if(!k) return []; const c=k.map(x=>+x[4]); const r=[]; for(let i=1;i<c.length;i++) r.push(Math.log(c[i]/c[i-1])); return r.slice(-60); };
              const fBTC=toRet5(kBTC15), fETH=toRet5(kETH15), fSOL=toRet5(kSOL15);

              // Prefilter
              const picksRaw=[];
              const B=10;
              for(let i=0;i<(universe||[]).length;i+=B){
                const batch=await Promise.all(universe.slice(i,i+B).map(async c=>{
                  try{
                    const now=Date.now(); const lastTs=(await (async()=>state.cooldown?.[c.base]))||0;
                    if(lastTs && (now-lastTs) < COOLDOWN_MS) return null;

                    const book=bookMap.get(c.symbol); if(!book?.bid||!book?.ask) return null;
                    const mid=(book.bid+book.ask)/2; if(!(mid>0)) return null;
                    const spreadBps=Math.round(((book.ask-book.bid)/mid)*10000);
                    if(spreadBps>MAX_SPREAD_BPS) return null;

                    const k5=await fetchK(c.symbol,"5m",K5M); if(!k5||k5.length<Math.max(EMA_SLOW+5,ATR_P+5)) return null;
                    const k15=await fetchK(c.symbol,"15m",K15M);
                    const k1h=await fetchK(c.symbol,"1h",K1H);

                    const c5_raw=k5.map(x=>+x[4]);
                    const c5=kalman1D(c5_raw,{q:1e-4,r:5e-4,x0:c5_raw[0],p0:1e-2});
                    const h5=k5.map(x=>+x[2]), l5=k5.map(x=>+x[3]), v5=k5.map(x=>+x[5]);

                    const em21=ema(c5,EMA_FAST), em50=ema(c5,EMA_SLOW);
                    const { adx:adx5, atr:atr5 } = computeADX_ATR(h5,l5,c5,ADX_P)||{};
                    if(!(adx5&&atr5)) return null;
                    const atr_bps=Math.round((atr5/c5.at(-1))*10000); if(atr_bps<4||atr_bps>260) return null;

                    const c15=k15?.map(x=>+x[4])||[], c1h=k1h?.map(x=>+x[4])||[];
                    const em15f=c15.length?ema(c15,EMA_FAST):null, em15s=c15.length?ema(c15,EMA_SLOW):null;
                    const em1hf=c1h.length?ema(c1h,EMA_FAST):null, em1hs=c1h.length?ema(c1h,EMA_SLOW):null;

                    const vwap5=vwapAnchored(h5,l5,c5,v5,VWAP_5M_WIN);
                    const last=c5.at(-1), prev=c5.at(-2), prev3=c5.at(-4);
                    const roc5=(last/prev)-1, roc15=(last/prev3)-1;

                    const upF=last>=em21, upS=last>=em50;
                    const up15=(em15f&&em15s)? (last>=em15f && last>=em15s) : true;
                    const up1h=(em1hf&&em1hs)? (last>=em1hf && last>=em1hs) : true;
                    const z_vwap=(last-vwap5)/(atr5||1);
                    const rsi14=rsi(c5,14);

                    let pHigh15=null,pLow15=null;
                    if(k15 && k15.length>40){
                      const highs=k15.map(x=>+x[2]), lows=k15.map(x=>+x[3]);
                      const win=40; pHigh15=Math.max(...highs.slice(-win)); pLow15=Math.min(...lows.slice(-win));
                    }
                    const boUp = pHigh15 ? (last>pHigh15) : false;
                    const boDn = pLow15  ? (last<pLow15 ) : false;

                    const winS=20; const retW=[]; for(let i=c5.length-winS;i<c5.length;i++){ retW.push((c5[i]/c5[i-1])-1); }
                    const bbWidth = std(retW)*Math.sqrt(winS);
                    const kelWidth = (atr5/last);
                    const squeezeRatio = kelWidth>0 ? (bbWidth/kelWidth) : 1;
                    const squeezeScore = clamp((1.15 - squeezeRatio)/0.45, 0, 1);

                    const adxF=clamp((adx5-16)/14,0,1);
                    const s1=tanh(roc5/0.0030), s2=tanh(roc15/0.0065);

                    const sideTrend= (0.6*roc5+0.4*roc15)>=0 ? "long":"short";
                    const trendAlign = (sideTrend==="long" && upF&&upS&&up15&&up1h) || (sideTrend==="short" && !upF&&!upS&&(!up15||!up1h));
                    let pTrend = clamp(0.5 + 0.27*(0.6*s1+0.4*s2)*(trendAlign?1.0:0.7)*adxF, 0.32, 0.93);

                    const sideMR = z_vwap>0 ? "short" : "long";
                    const rsiEdge=(rsi14!=null)?(rsi14-50)/50:0;
                    const sMR=tanh(Math.abs(z_vwap))*Math.sign(-z_vwap);
                    let pMR = clamp(0.5 + 0.23*(0.7*sMR + 0.3*(-rsiEdge))*(1-adxF), 0.35, 0.90);

                    const sideBO = boUp ? "long" : boDn ? "short" : (0.6*roc5+0.4*roc15)>=0?"long":"short";
                    let boBase = (boUp||boDn ? 1.0 : 0.35) * (0.6+0.4*adxF);
                    boBase *= (1 + 0.4*squeezeScore);
                    let pBO = clamp(0.5 + 0.29*(boBase*(sideBO==="long"?1:-1)), 0.35, 0.96);

                    const wT=weights.wTrend, wM=weights.wMR, wB=weights.wBO;

                    const pLong0  = clamp(wT*(sideTrend==="long"?pTrend:1-pTrend) + wM*(sideMR==="long"?pMR:1-pMR) + wB*(sideBO==="long"?pBO:1-pBO), 0.30, 0.97);
                    const pShort0 = clamp(wT*(sideTrend==="short"?pTrend:1-pTrend) + wM*(sideMR==="short"?pMR:1-pMR) + wB*(sideBO==="short"?pBO:1-pBO), 0.30, 0.97);

                    const lvl_gap_long_bps = (pLow15!=null && last>0) ? Math.max(0, ((last - pLow15)/last)*10000) : 0;
                    const lvl_gap_short_bps= (pHigh15!=null && last>0)? Math.max(0, ((pHigh15 - last)/last)*10000) : 0;

                    const gp_feat=[ clamp((adx5-16)/14,0,1), clamp(z_vwap,-3,3), (rsi14||50)/100, 0 ];

                    const signalScore = clamp(Math.round(
                      50 + 30*((Math.max(pLong0,pShort0)-0.5)*2)
                      + 10*clamp((adx5-18)/14,0,1)
                      + 5*(trendAlign?1:0)
                      + 5*clamp(squeezeScore*1.2,0,1)
                      - Math.min(10, Math.max(0,(spreadBps-6)/2))
                    ), 0, 100);

                    return {
                      c, k5, c5, adx5, atr_bps:atr_bps, spreadBps, pLong0, pShort0,
                      styleLong: trendAlign ? "trend" : (squeezeScore>0.25||boUp) ? "breakout" : "mr",
                      styleShort: !trendAlign ? "trend" : (squeezeScore>0.25||boDn) ? "breakout" : "mr",
                      upF, upS, up15, up1h, z_vwap, boUp, boDn, trendAlign, squeezeScore,
                      lvl_gap_long_bps, lvl_gap_short_bps, signalScore, gp_feat_base:gp_feat
                    };
                  }catch{ return null; }
                }));
                for(const x of batch) if(x && x.signalScore > 50) picksRaw.push(x);
              }
              if(!picksRaw.length){ reason = (reason!=="ok"?reason:"no_candidates"); }

              // Refine
              picksRaw.sort((a,b)=> b.signalScore - a.signalScore);
              const REFINE_M = Math.min(UNIV_TARGET_MAX, picksRaw.length);
              const refined=[];
              function retLog(arr){ const r=[]; for(let i=1;i<arr.length;i++) r.push(Math.log(arr[i]/arr[i-1])); return r.slice(-36); }

              for(let idx=0; idx<REFINE_M; idx++){
                const p=picksRaw[idx];
                const c=p.c;
                const book=bookMap.get(c.symbol); if(!book?.bid||!book?.ask) continue;
                const mid=(book.bid+book.ask)/2;

                const depth=await fetchDepth(c.symbol);
                let obi=0, slipL=p.spreadBps/2, slipS=p.spreadBps/2, fillL=0, fillS=0;
                if(depth?.asks?.length && depth?.bids?.length){
                  const w=(i)=>Math.exp(-i*0.18);
                  let bidNot=0, askNot=0;
                  for(let i=0;i<Math.min(OBI_TOPN, depth.bids.length); i++){ const p0=+depth.bids[i][0], q=+depth.bids[i][1]; if(p0>0&&q>0) bidNot += p0*q*w(i); }
                  for(let i=0;i<Math.min(OBI_TOPN, depth.asks.length); i++){ const p0=+depth.asks[i][0], q=+depth.asks[i][1]; if(p0>0&&q>0) askNot += p0*q*w(i); }
                  obi = (bidNot+askNot>0) ? (bidNot-askNot)/(bidNot+askNot) : 0;

                  const vwapFill=(levels,targetUSD)=>{
                    let remain=targetUSD,val=0,qty=0;
                    for(const [ps,qs] of levels){ const p=+ps,q=+qs; if(!(p>0&&q>0)) continue; const can=p*q, take=Math.min(remain,can), tq=take/p;
                      val+=p*tq; qty+=tq; remain-=take; if(remain<=1e-6) break; }
                    return { px: qty>0? val/qty : null, filledUSD: (targetUSD-remain) };
                  };
                  const buy=vwapFill(depth.asks, Math.max(50,NOTIONAL));
                  const sell=vwapFill(depth.bids, Math.max(50,NOTIONAL));
                  slipL = buy.px? Math.max(0, Math.round((buy.px - mid)/mid*10000)) : slipL;
                  slipS = sell.px? Math.max(0, Math.round((mid - sell.px)/mid*10000)) : slipS;
                  fillL = Math.min(1, buy.filledUSD/Math.max(1,NOTIONAL));
                  fillS = Math.min(1, sell.filledUSD/Math.max(1,NOTIONAL));
                }
                const obiAdjLong = Math.max(0, -obi);
                const obiAdjShort= Math.max(0, +obi);

                const gp_feat_long  = [ clamp((p.adx5-16)/14,0,1), clamp(p.z_vwap,-3,3), (rsi(p.c5,14)||50)/100, Math.max(0,-obi) ];
                const gp_feat_short = [ clamp((p.adx5-16)/14,0,1), clamp(-p.z_vwap,-3,3), (100-(rsi(p.c5,14)||50))/100, Math.max(0,+obi) ];

                let pLong=p.pLong0, pShort=p.pShort0;
                const lastSide=state.cooldown_side?.[c.base];
                if(lastSide && lastSide.side && lastSide.ts_ms && Date.now()-lastSide.ts_ms<FLIP_GUARD_MS){
                  if(lastSide.side==="long") pShort = Math.max(0.30, pShort-0.03);
                  if(lastSide.side==="short") pLong  = Math.max(0.30, pLong -0.03);
                }

                const costLong=COST_BPS + Math.max(Math.round(p.spreadBps/2), slipL);
                const costShort=COST_BPS + Math.max(Math.round(p.spreadBps/2), slipS);

                const y=[]; for(let i=1;i<p.c5.length;i++) y.push(Math.log(p.c5[i]/p.c5[i-1]));
                const mu5=mean(y)||0, sig5=std(y)||1e-4;

                const entryMid = mid;
                const ttlSecBase = (weights.wTrend>weights.wMR ? 720 : 560) + 240*clamp((p.adx5-16)/14,0,1) + 120*(p.squeezeScore||0);
                const hold_sec = clamp(Math.round(ttlSecBase), TTL_MIN, TTL_MAX);
                const rrrDynLong  = optimizeRRR_MC({ atr_bps:p.atr_bps, cost_bps:costLong  , spread_bps:p.spreadBps, entry:entryMid, side:"long" , mu:mu5, sigma:sig5, ttl_sec:hold_sec });
                const rrrDynShort = optimizeRRR_MC({ atr_bps:p.atr_bps, cost_bps:costShort , spread_bps:p.spreadBps, entry:entryMid, side:"short", mu:mu5, sigma:sig5, ttl_sec:hold_sec });

                const useGP = !!gpModel;
                const gpL = useGP? gpPredict(gpModel, gp_feat_long)  : {mu:pLong, sigma:0.20};
                const gpS = useGP? gpPredict(gpModel, gp_feat_short) : {mu:pShort, sigma:0.20};
                const dataN=(state.gp_data?.length||0);
                const wGP = clamp(dataN/200, 0.15, 0.65);
                const pLong_adj  = clamp((1-wGP)*pLong  + wGP*gpL.mu,  0.30, 0.97);
                const pShort_adj = clamp((1-wGP)*pShort + wGP*gpS.mu,   0.30, 0.97);
                const pLong_lcb  = clamp(pLong_adj  - WILSON_Z*(gpL.sigma||0.20), 0.10, 0.98);
                const pShort_lcb = clamp(pShort_adj - WILSON_Z*(gpS.sigma||0.20), 0.10, 0.98);

                const evL = rrrDynLong  ? gbmSimEV({ entry:entryMid, tp_bps:rrrDynLong.tp_bps, sl_bps:rrrDynLong.sl_bps, side:"long",  mu:mu5, sigma:sig5, dt:1, steps:Math.max(1,Math.round(hold_sec/300)), N:192, cost_bps:costLong  }) : { ev_lcb_bps:-1e9, p_lcb:0.0 };
                const evS = rrrDynShort ? gbmSimEV({ entry:entryMid, tp_bps:rrrDynShort.tp_bps, sl_bps:rrrDynShort.sl_bps, side:"short", mu:mu5, sigma:sig5, dt:1, steps:Math.max(1,Math.round(hold_sec/300)), N:192, cost_bps:costShort }) : { ev_lcb_bps:-1e9, p_lcb:0.0 };

                const evLong  = Math.round(pLong_lcb  * (rrrDynLong?.tp_bps  ||0) - (1-pLong_lcb )*(rrrDynLong?.sl_bps||0) - costLong);
                const evShort = Math.round(pShort_lcb * (rrrDynShort?.tp_bps ||0) - (1-pShort_lcb)*(rrrDynShort?.sl_bps||0) - costShort);
                const chooseLong = (evLong>=evShort) && rrrDynLong;

                const chosen = chooseLong ? {side:"long",  tp_bps:rrrDynLong.tp_bps,  sl_bps:rrrDynLong.sl_bps,  p_lcb:pLong_lcb,  cost_bps:costLong , ev_lcb_bps:evLong }
                                          : {side:"short", tp_bps:rrrDynShort.tp_bps, sl_bps:rrrDynShort.sl_bps, p_lcb:pShort_lcb, cost_bps:costShort, ev_lcb_bps:evShort};
                const exp_bps_mc = chooseLong ? evL.ev_bps : evS.ev_bps;

                const yR = y.slice(-61), X1=fBTC.slice(-yR.length), X2=fETH.slice(-yR.length), X3=fSOL.slice(-yR.length);
                const {R2} = (function ols(y,f1,f2,f3){
                  const n=Math.min(y.length,f1.length,f2.length,f3.length); if(n<20) return {R2:0};
                  const Y=y.slice(-n), X1=f1.slice(-n), X2=f2.slice(-n), X3=f3.slice(-n);
                  const ym=mean(Y); let sYY=0,sRes=0;
                  const k=4; const XtX=Array.from({length:k},()=>Array(k).fill(0)), XtY=Array(k).fill(0);
                  for(let i=0;i<n;i++){ const row=[1, X1[i]||0, X2[i]||0, X3[i]||0], yi=Y[i]; for(let a=0;a<k;a++){ XtY[a]+=row[a]*yi; for(let b=0;b<k;b++) XtX[a][b]+=row[a]*row[b]; } }
                  for(let i=0;i<k;i++) XtX[i][i]+=1e-6;
                  const M=XtX.map((row,i)=>row.concat([XtY[i]]));
                  for(let i=0;i<k;i++){ let p=i; for(let r=i+1;r<k;r++) if(Math.abs(M[r][i])>Math.abs(M[p][i])) p=r;
                    if(Math.abs(M[p][i])<1e-12) return {R2:0}; if(p!==i) [M[i],M[p]]=[M[p],M[i]];
                    const piv=M[i][i]; for(let j=i;j<=k;j++) M[i][j]/=piv;
                    for(let r=0;r<k;r++){ if(r===i) continue; const f=M[r][i]; for(let j=i;j<=k;j++) M[r][j]-=f*M[i][j]; } }
                  const beta=M.map(row=>row[k]);
                  for(let i=0;i<n;i++){ const row=[1, X1[i]||0, X2[i]||0, X3[i]||0]; let yhat=0; for(let j=0;j<k;j++) yhat+=row[j]*beta[j]; const e=Y[i]-yhat; sRes+=e*e; sYY+=(Y[i]-ym)**2; }
                  return {R2: clamp(sYY>0? (1-sRes/sYY):0,0,1)};
                })(yR,X1,X2,X3);

                const liq = liqPct.get(c.symbol)||0.5;
                const adxF=clamp((p.adx5-16)/14,0,1);

                const score = clamp(Math.round(60 + 30*(chosen.p_lcb-0.5)*2 + 12*adxF + 7*((liq-0.5)*2) - Math.min(12, Math.max(0,(p.spreadBps-5)/2)) - Math.round(9*clamp(R2,0,1))), 1, 99);

                refined.push({
                  symbol:c.symbol, base:c.base, quote:c.quote, qv:c.qv,
                  side:chosen.side, p_lcb:+chosen.p_lcb.toFixed(3),
                  p_win: +(Math.max(p.pLong0,p.pShort0)).toFixed(3),
                  exp_bps: exp_bps_mc, exp_lcb_bps: chosen.ev_lcb_bps,
                  tp_bps: chosen.tp_bps, sl_bps: chosen.sl_bps, rrr: +(chosen.tp_bps/Math.max(1,chosen.sl_bps)).toFixed(2),
                  spread_bps: p.spreadBps, cost_bps: chosen.cost_bps,
                  adx:+(p.adx5||0).toFixed(1), atr_bps:p.atr_bps,
                  regime: (weights.wTrend>weights.wMR? "trend":"meanrevert"), style: (chosen.side==="long"? p.styleLong: p.styleShort),
                  score, beta_r2:+R2.toFixed(2), n_conf:Math.round(60+40*adxF),
                  obi:+obi.toFixed(3), hold_sec, liq_pct:+liq.toFixed(3),
                  ret5:retLog(p.c5), fill_prob:+(chosen.side==="long"?fillL:fillS).toFixed(2), dyn_floor: Math.max(EXP_LCB_MIN_BPS, 6 + Math.max(0,12-p.spreadBps)/2),
                  p_long_adj:pLong, p_short_adj:pShort,
                  cost_long:costLong, cost_short:costShort,
                  style_long:p.styleLong, style_short:p.styleShort,
                  lvl_gap_long_bps:p.lvl_gap_long_bps, lvl_gap_short_bps:p.lvl_gap_short_bps,
                  trend_align_long:(p.upF&&p.upS&&p.up15&&p.up1h),
                  trend_align_short:(!p.upF&&!p.upS&&(!p.up15||!p.up1h))
                });
              }

              // Rank refined
              refined.sort((a,b)=> b.exp_lcb_bps!==a.exp_lcb_bps ? b.exp_lcb_bps-a.exp_lcb_bps
                                : b.exp_bps!==a.exp_bps ? b.exp_bps-a.exp_bps
                                : b.score!==a.score ? b.score-a.score
                                : b.qv-a.qv);

              // Strict picks (with MC-LCB EV)
              const CORE_CORR_MAX=0.84, OF_CORR_MAX=0.90;
              const rho=(a,b)=>corr(a.ret5||[],b.ret5||[]);
              const strictOk=(cand)=> cand.p_lcb>=0.60 && cand.exp_lcb_bps>=Math.max(cand.dyn_floor+3, EXP_LCB_MIN_BPS+3)
                && (cand.fill_prob||0)>=0.70 && cand.cost_bps<=Math.max(COST_BPS+8, 18)
                && cand.spread_bps<=MAX_SPREAD_BPS && cand.beta_r2<=0.75;

              const strictPicks=[];
              for(const cand of refined){
                if(strictPicks.length>=Math.min(3, TOP_N)) break;
                if(!strictOk(cand)) continue;
                let ok=true; for(const s of strictPicks){ if(rho(cand,s)>CORE_CORR_MAX){ ok=false; break; } }
                if(ok) strictPicks.push(cand);
              }

              let selected=[];
              if(strictPicks.length>0){
                selected=strictPicks;
                selectionTier="strict";
                reason=(reason!=="ok"?reason:"strict");
              }else{
                // MP fallback with MC-enhanced EV
                const pool = Array.from(refined).sort((a,b)=> b.score-a.score).slice(0, Math.max(3, MP_TOP_POOL||20));
                const poolMP = pool.map(c=>{
                  const trendBonus = (c.side==="long" ? (c.trend_align_long?1:0) : (c.trend_align_short?1:0));
                  const mp_rank = (1000*(c.exp_lcb_bps))
                                + (10*(+c.adx||0))
                                + (40*(+c.liq_pct||0))
                                + (60*(+c.fill_prob||0))
                                + (80*trendBonus)
                                - (12*Math.max(0,(+c.spread_bps||0)-6))
                                - (100*(+c.beta_r2||0));
                  return { ...c, mp_rank };
                }).sort((a,b)=> (b.exp_lcb_bps - a.exp_lcb_bps) || (b.mp_rank - a.mp_rank) || (b.exp_bps - a.exp_bps) || (b.score - a.score));

                const fallbackOk=(cand,{minFill=0.60,maxBeta=0.85,maxCost=Math.max(COST_BPS+10,20),minLCB=EXP_LCB_MIN_BPS}={})=>{
                  const lcbOK = (cand.exp_lcb_bps ?? -1e9) >= Math.max(minLCB, cand.dyn_floor ?? minLCB);
                  const fillOK = (cand.fill_prob ?? 0) >= minFill;
                  const betaOK = (cand.beta_r2 ?? 0) <= maxBeta;
                  const spreadOK = (cand.spread_bps ?? 99) <= MAX_SPREAD_BPS;
                  const costOK = (cand.cost_bps ?? 99) <= maxCost;
                  return lcbOK && fillOK && betaOK && spreadOK && costOK;
                };

                const take=[];
                // Pass 1
                for(const cand of poolMP){
                  if(take.length>=Math.min(3, TOP_N||3)) break;
                  if(!fallbackOk(cand,{minFill:0.62,maxBeta:0.82,maxCost:Math.max(COST_BPS+8,18),minLCB:EXP_LCB_MIN_BPS+2})) continue;
                  let ok=true; for(const s of take){ if(rho(cand,s)>OF_CORR_MAX){ ok=false; break; } }
                  if(ok) take.push(cand);
                }
                // Pass 2
                if(take.length<Math.min(3, TOP_N||3)){
                  for(const cand of poolMP){
                    if(take.length>=Math.min(3, TOP_N||3)) break;
                    if(!take.includes(cand) && fallbackOk(cand,{minFill:0.58,maxBeta:0.86,maxCost:Math.max(COST_BPS+10,22),minLCB:EXP_LCB_MIN_BPS})) {
                      let ok=true; for(const s of take){ if(rho(cand,s)>OF_CORR_MAX){ ok=false; break; } }
                      if(ok) take.push(cand);
                    }
                  }
                }
                // Pass 3
                if(take.length<Math.min(3, TOP_N||3)){
                  for(const cand of poolMP){
                    if(take.length>=Math.min(3, TOP_N||3)) break;
                    if(!take.includes(cand)){
                      let ok=true; for(const s of take){ if(rho(cand,s)>OF_CORR_MAX){ ok=false; break; } }
                      if(ok) take.push(cand);
                    }
                  }
                }

                // Force-fill to TOP_N (without reducing efficacy): only positive LCB EV + relaxed corr
                const TARGET_K = Math.min(3, TOP_N || 3);
                if (FILL_TO_TOP_N && take.length < TARGET_K) {
                  for (const cand of poolMP) {
                    if (take.length >= TARGET_K) break;
                    if (take.includes(cand)) continue;
                    const lcbOK = (cand.exp_lcb_bps ?? -1e9) >= Math.max(EV_MIN_BPS, 1);
                    if (!lcbOK) continue;
                    let ok = true;
                    for (const s of take) { if (rho(cand, s) > 0.98) { ok = false; break; } }
                    if (!ok) continue;
                    cand.mp_fill = true;
                    take.push(cand);
                  }
                }

                selected=take;
                selectionTier="mp_top20";
                reason=(reason!=="ok"?reason:"maxpower_top20");
              }

              // Build picks with absolute limit_at_old_sl + GP features persisted
              const wEv=softmax(selected.map(x=> (x.exp_lcb_bps)), 20);
              let picks = selected.map((x,i)=>{
                const sideUsed = x.side;
                const tpUsed = x.tp_bps;
                const slUsed = x.sl_bps;

                const bk = bookMap.get(x.symbol);
                const mid = (bk?.bid && bk?.ask) ? ((+bk.bid + +bk.ask)/2) : null;

                const slF = slUsed/10000, tpF = tpUsed/10000;
                const entry_limit = mid==null ? null : (sideUsed==="long" ? mid*(1 - slF) : mid*(1 + slF));
                const tp_abs = entry_limit==null ? null : (sideUsed==="long" ? entry_limit*(1 + tpF) : entry_limit*(1 - tpF));
                const sl_abs = entry_limit==null ? null : (sideUsed==="long" ? entry_limit*(1 - slF) : entry_limit*(1 + slF));

                const ttl = clamp(Math.round((x.hold_sec||720) + i*12), TTL_MIN, TTL_MAX);

                let size_bps = 0;
                if(FORCE_SIZE_BPS>0){ 
                  size_bps = Math.round(FORCE_SIZE_BPS);
                } else { 
                  size_bps = slUsed>0 ? Math.min(220, Math.round((wEv[i]*TARGET_PORT_RISK_BPS/slUsed)*100)) : 0;
                }
                // Micro-size any forced fills to preserve efficacy
                if (x.mp_fill) {
                  size_bps = Math.max(8, Math.round(size_bps * 0.4));
                }

                return {
                  symbol: x.base, symbol_full: x.symbol, quote: x.quote,
                  side: sideUsed, rank:i+1, ttl_sec: ttl,
                  p_win:x.p_win, p_lcb: x.p_lcb,
                  tp_bps: tpUsed, sl_bps: slUsed, rrr: +(tpUsed/Math.max(1,slUsed)).toFixed(2),
                  exp_lcb_bps: x.exp_lcb_bps,
                  ev_bps: x.exp_bps,
                  spread_bps:x.spread_bps, cost_bps:x.cost_bps,
                  adx:x.adx, atr_bps:x.atr_bps, n_conf:x.n_conf, obi:x.obi,
                  regime:x.regime, style:x.style,
                  liq_pct:x.liq_pct, fill_prob:x.fill_prob,
                  entry_policy:"limit_at_old_sl", entry_type:"limit", activation:"on_fill",
                  entry_mid: mid, entry_limit, tp_abs, sl_abs,
                  size_bps, tier: selectionTier,
                  mp_fill: !!x.mp_fill,
                  // GP features for training on resolution
                  gp_feat: [ clamp((x.adx-16)/14,0,1), 0, (x.rsi||50)/100, Math.max(0, sideUsed==="long"? -x.obi : +x.obi) ],
                  ret5: x.ret5
                };
              });

              // Portfolio VaR/ES gate: scale sizes if tail risk too high
              try{
                const varStats = portfolioVaR_ES(picks);
                const ES_LIMIT = -220;
                if(varStats.ES95_bps < ES_LIMIT){
                  const scale = clamp(ES_LIMIT/Math.min(-1e-6, varStats.ES95_bps), 0.35, 1);
                  picks = picks.map(p=> ({ ...p, size_bps: Math.round(p.size_bps*scale) }));
                  log("VaR/ES throttle", varStats, "scale", scale);
                }else{ log("VaR/ES ok", varStats); }
              }catch(e){ log("VaR/ES warn", e?.message||e); }

              // Save cooldown + pending (persist absolutes + gp_feat)
              try{
                const nowMs=Date.now(); const ideasTs=new Date(nowMs).toISOString();
                for(const p of picks){
                  const bk=bookMap.get(p.symbol_full); const mid=bk? (bk.bid+bk.ask)/2 : 0;
                  const entry_mid = p.entry_mid ?? mid;
                  const entry_new = p.entry_limit ?? (p.side==="long" ? entry_mid*(1 - p.sl_bps/10000) : entry_mid*(1 + p.sl_bps/10000));
                  const tp_abs = p.tp_abs ?? (p.side==="long" ? entry_new*(1 + p.tp_bps/10000) : entry_new*(1 - p.tp_bps/10000));
                  const sl_abs = p.sl_abs ?? (p.side==="long" ? entry_new*(1 - p.sl_bps/10000) : entry_new*(1 + p.sl_bps/10000));
                  state.cooldown[p.symbol]=nowMs;
                  state.cooldown_side[p.symbol]={ side:p.side, ts_ms:nowMs };
                  state.pending.push({
                    ts:ideasTs, ts_ms:nowMs, symbolFull:p.symbol_full, base:p.symbol, quote:p.quote, side:p.side,
                    entry_policy:"limit_at_old_sl", entry_mid, entry_price:entry_new, entry_limit:entry_new,
                    tp_abs, sl_abs, hold_sec:p.ttl_sec, tp_bps:p.tp_bps, sl_bps:p.sl_bps, regime:p.regime, cost_bps:p.cost_bps,
                    gp_feat: p.gp_feat
                  });
                }
                if(state.pending.length>550) state.pending=state.pending.slice(-550);
                state.last_ts=new Date().toISOString();
                await saveState(persist,state);
              }catch(e){ log("state save warn", e?.message||e); }

              // POST
              const meta={
                exchange:"mexc", exchange_base:BASE,
                counts:{ universe:universe.length, pre:picksRaw.length, refined:refined.length, selected:picks.length },
                filters:{
                  dyn_min_qv:dynMinQV, univ_target_min:UNIV_TARGET_MIN, univ_target_max:UNIV_TARGET_MAX,
                  score_cutoff:50, refine_topk:UNIV_TARGET_MAX,
                  max_spread_bps:MAX_SPREAD_BPS, ema_fast:EMA_FAST, ema_slow:EMA_SLOW, adx_p:ADX_P, atr_p:ATR_P, vwap_5m_win:VWAP_5M_WIN,
                  depth_limit:DEPTH_LIMIT, obi_topn:OBI_TOPN,
                  cooldown_min: COOLDOWN_MS/60000, flip_guard_min: FLIP_GUARD_MS/60000,
                  fees_bps:COST_BPS, notional_usd:NOTIONAL,
                  exp_lcb_min_bps:EXP_LCB_MIN_BPS, wilson_z:WILSON_Z,
                  mp_top_pool: MP_TOP_POOL,
                  entry_policy: "limit_at_old_sl",
                  stochastic: { hmm:true, gp:true, sde_mc:true, var_es:true, kalman:true },
                  fill_to_top_n: FILL_TO_TOP_N
                },
                dd_gate: (function(){ const s=state.equity||[]; const day=Date.now()-24*3600*1000; let pnl24=0,cum=0,peak=0,dd=0; for(const e of s){ if(e.ts_ms>=day) pnl24+=e.pnl_bps; cum+=e.pnl_bps; if(cum>peak) peak=cum; dd=Math.min(dd,cum-peak); } return { pnl24_bps:Math.round(pnl24), peak_dd_bps:Math.round(dd), throttle }; })(),
                tod: { active: S_H!=null && E_H!=null, start:S_H, end:E_H },
                tier: selectionTier,
                regime_post: weights
              };
              const payload={ ts:new Date().toISOString(), mode:"normal", source:"external_pusher", meta:{ origin:"github_actions", reason, ...meta }, top_n:picks.length||0, ideas:picks||[] };

              console.log(`[gha] pushing ${picks.length} ideas (${selectionTier}) to ${PUSH_URL}`);
              try{
                const r=await fetchWithTimeout(PUSH_URL,{ method:"POST", headers:{ "Content-Type":"application/json","Authorization":`Bearer ${PUSH_TOKEN}` }, body: JSON.stringify(payload) },15000);
                let txt=""; try{ txt=await r.text(); }catch{}
                console.log(`[gha] push status ${r?.status||"ERR"} ${(txt||"").slice(0,400)}`);
              }catch(e){
                console.log(`[gha] push failed ${e?.message||e}`);
              }

            }catch(e){
              reason = reason!=="ok"?reason:"data_error";
              const payload={ ts:new Date().toISOString(), mode:"normal", source:"external_pusher", meta:{ origin:"github_actions", reason, error:(e?.message||String(e)).slice(0,220) }, top_n:0, ideas:[] };
              console.log(`[gha] pushing 0 ideas to ${PUSH_URL}`);
              try{
                const r=await fetchWithTimeout(PUSH_URL,{ method:"POST", headers:{ "Content-Type":"application/json","Authorization":`Bearer ${PUSH_TOKEN}` }, body: JSON.stringify(payload) },15000);
                let txt=""; try{ txt=await r.text(); }catch{}
                console.log(`[gha] push status ${r?.status||"ERR"} ${(txt||"").slice(0,200)}`);
              }catch(e2){
                console.log(`[gha] push failed ${e2?.message||e2}`);
              }
            }
          })();
          NODE
          EXIT_CODE=$?

          # Shell-level fallback (in case node crashed before posting)
          set -e
          if [[ $EXIT_CODE -ne 0 ]]; then
            echo "[gha] pusher exited with code $EXIT_CODE — sending minimal payload so tail shows a [push] line"
            if [[ -n "${WORKER_PUSH_URL:-}" ]]; then
              health_url="${WORKER_PUSH_URL/\/signals\/push/\/health}"
              echo "[gha] fallback health GET ${health_url}"
              curl -sS -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${PUSH_TOKEN}" --max-time 8 "${health_url}" || true
              now=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
              payload='{"ts":"'"$now"'","mode":"normal","source":"external_pusher","meta":{"origin":"github_actions","reason":"fallback_node_error"},"top_n":0,"ideas":[]}'
              echo "[gha] pushing 0 ideas to ${WORKER_PUSH_URL}"
              curl -sS -o /tmp/push_resp.txt -w "%{http_code}" -X POST \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${PUSH_TOKEN}" \
                --data "${payload}" \
                --max-time 12 \
                "${WORKER_PUSH_URL}" || true
            else
              echo "[gha] WORKER_PUSH_URL is empty; skip fallback curl"
            fi
            exit 0
          fi
